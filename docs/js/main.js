/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/mustache/mustache.mjs":
/*!********************************************!*\
  !*** ./node_modules/mustache/mustache.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\nvar objectToString = Object.prototype.toString;\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\n  return objectToString.call(object) === '[object Array]';\n};\n\nfunction isFunction (object) {\n  return typeof object === 'function';\n}\n\n/**\n * More correct typeof string handling array\n * which normally returns typeof 'object'\n */\nfunction typeStr (obj) {\n  return isArray(obj) ? 'array' : typeof obj;\n}\n\nfunction escapeRegExp (string) {\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Null safe way of checking whether or not an object,\n * including its prototype, has a given property\n */\nfunction hasProperty (obj, propName) {\n  return obj != null && typeof obj === 'object' && (propName in obj);\n}\n\n/**\n * Safe way of detecting whether or not the given thing is a primitive and\n * whether it has the given property\n */\nfunction primitiveHasOwnProperty (primitive, propName) {\n  return (\n    primitive != null\n    && typeof primitive !== 'object'\n    && primitive.hasOwnProperty\n    && primitive.hasOwnProperty(propName)\n  );\n}\n\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n// See https://github.com/janl/mustache.js/issues/189\nvar regExpTest = RegExp.prototype.test;\nfunction testRegExp (re, string) {\n  return regExpTest.call(re, string);\n}\n\nvar nonSpaceRe = /\\S/;\nfunction isWhitespace (string) {\n  return !testRegExp(nonSpaceRe, string);\n}\n\nvar entityMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nfunction escapeHtml (string) {\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n    return entityMap[s];\n  });\n}\n\nvar whiteRe = /\\s*/;\nvar spaceRe = /\\s+/;\nvar equalsRe = /\\s*=/;\nvar curlyRe = /\\s*\\}/;\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n/**\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\n * argument is given here it must be an array with two string values: the\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n * course, the default is to use mustaches (i.e. mustache.tags).\n *\n * A token is an array with at least 4 elements. The first element is the\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n * all text that appears outside a symbol this element is \"text\".\n *\n * The second element of a token is its \"value\". For mustache tags this is\n * whatever else was inside the tag besides the opening symbol. For text tokens\n * this is the text itself.\n *\n * The third and fourth elements of the token are the start and end indices,\n * respectively, of the token in the original template.\n *\n * Tokens that are the root node of a subtree contain two more elements: 1) an\n * array of tokens in the subtree and 2) the index in the original template at\n * which the closing tag for that section begins.\n *\n * Tokens for partials also contain two more elements: 1) a string value of\n * indendation prior to that tag and 2) the index of that tag on that line -\n * eg a value of 2 indicates the partial is the third tag on this line.\n */\nfunction parseTemplate (template, tags) {\n  if (!template)\n    return [];\n  var lineHasNonSpace = false;\n  var sections = [];     // Stack to hold section tokens\n  var tokens = [];       // Buffer to hold the tokens\n  var spaces = [];       // Indices of whitespace tokens on the current line\n  var hasTag = false;    // Is there a {{tag}} on the current line?\n  var nonSpace = false;  // Is there a non-space char on the current line?\n  var indentation = '';  // Tracks indentation for tags that use it\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n  // Strips all whitespace tokens array for the current line\n  // if there was a {{#tag}} on it and otherwise only space.\n  function stripSpace () {\n    if (hasTag && !nonSpace) {\n      while (spaces.length)\n        delete tokens[spaces.pop()];\n    } else {\n      spaces = [];\n    }\n\n    hasTag = false;\n    nonSpace = false;\n  }\n\n  var openingTagRe, closingTagRe, closingCurlyRe;\n  function compileTags (tagsToCompile) {\n    if (typeof tagsToCompile === 'string')\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n      throw new Error('Invalid tags: ' + tagsToCompile);\n\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n  }\n\n  compileTags(tags || mustache.tags);\n\n  var scanner = new Scanner(template);\n\n  var start, type, value, chr, token, openSection;\n  while (!scanner.eos()) {\n    start = scanner.pos;\n\n    // Match any text between tags.\n    value = scanner.scanUntil(openingTagRe);\n\n    if (value) {\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n        chr = value.charAt(i);\n\n        if (isWhitespace(chr)) {\n          spaces.push(tokens.length);\n          indentation += chr;\n        } else {\n          nonSpace = true;\n          lineHasNonSpace = true;\n          indentation += ' ';\n        }\n\n        tokens.push([ 'text', chr, start, start + 1 ]);\n        start += 1;\n\n        // Check for whitespace on the current line.\n        if (chr === '\\n') {\n          stripSpace();\n          indentation = '';\n          tagIndex = 0;\n          lineHasNonSpace = false;\n        }\n      }\n    }\n\n    // Match the opening tag.\n    if (!scanner.scan(openingTagRe))\n      break;\n\n    hasTag = true;\n\n    // Get the tag type.\n    type = scanner.scan(tagRe) || 'name';\n    scanner.scan(whiteRe);\n\n    // Get the tag value.\n    if (type === '=') {\n      value = scanner.scanUntil(equalsRe);\n      scanner.scan(equalsRe);\n      scanner.scanUntil(closingTagRe);\n    } else if (type === '{') {\n      value = scanner.scanUntil(closingCurlyRe);\n      scanner.scan(curlyRe);\n      scanner.scanUntil(closingTagRe);\n      type = '&';\n    } else {\n      value = scanner.scanUntil(closingTagRe);\n    }\n\n    // Match the closing tag.\n    if (!scanner.scan(closingTagRe))\n      throw new Error('Unclosed tag at ' + scanner.pos);\n\n    if (type == '>') {\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n    } else {\n      token = [ type, value, start, scanner.pos ];\n    }\n    tagIndex++;\n    tokens.push(token);\n\n    if (type === '#' || type === '^') {\n      sections.push(token);\n    } else if (type === '/') {\n      // Check section nesting.\n      openSection = sections.pop();\n\n      if (!openSection)\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n      if (openSection[1] !== value)\n        throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n    } else if (type === 'name' || type === '{' || type === '&') {\n      nonSpace = true;\n    } else if (type === '=') {\n      // Set the tags for the next time around.\n      compileTags(value);\n    }\n  }\n\n  stripSpace();\n\n  // Make sure there are no open sections when we're done.\n  openSection = sections.pop();\n\n  if (openSection)\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n  return nestTokens(squashTokens(tokens));\n}\n\n/**\n * Combines the values of consecutive text tokens in the given `tokens` array\n * to a single token.\n */\nfunction squashTokens (tokens) {\n  var squashedTokens = [];\n\n  var token, lastToken;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    if (token) {\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n        lastToken[1] += token[1];\n        lastToken[3] = token[3];\n      } else {\n        squashedTokens.push(token);\n        lastToken = token;\n      }\n    }\n  }\n\n  return squashedTokens;\n}\n\n/**\n * Forms the given array of `tokens` into a nested tree structure where\n * tokens that represent a section have two additional items: 1) an array of\n * all tokens that appear in that section and 2) the index in the original\n * template that represents the end of that section.\n */\nfunction nestTokens (tokens) {\n  var nestedTokens = [];\n  var collector = nestedTokens;\n  var sections = [];\n\n  var token, section;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n    }\n  }\n\n  return nestedTokens;\n}\n\n/**\n * A simple string scanner that is used by the template parser to find\n * tokens in template strings.\n */\nfunction Scanner (string) {\n  this.string = string;\n  this.tail = string;\n  this.pos = 0;\n}\n\n/**\n * Returns `true` if the tail is empty (end of string).\n */\nScanner.prototype.eos = function eos () {\n  return this.tail === '';\n};\n\n/**\n * Tries to match the given regular expression at the current position.\n * Returns the matched text if it can match, the empty string otherwise.\n */\nScanner.prototype.scan = function scan (re) {\n  var match = this.tail.match(re);\n\n  if (!match || match.index !== 0)\n    return '';\n\n  var string = match[0];\n\n  this.tail = this.tail.substring(string.length);\n  this.pos += string.length;\n\n  return string;\n};\n\n/**\n * Skips all text until the given regular expression can be matched. Returns\n * the skipped string, which is the entire tail if no match can be made.\n */\nScanner.prototype.scanUntil = function scanUntil (re) {\n  var index = this.tail.search(re), match;\n\n  switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = '';\n      break;\n    case 0:\n      match = '';\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n  }\n\n  this.pos += match.length;\n\n  return match;\n};\n\n/**\n * Represents a rendering context by wrapping a view object and\n * maintaining a reference to the parent context.\n */\nfunction Context (view, parentContext) {\n  this.view = view;\n  this.cache = { '.': this.view };\n  this.parent = parentContext;\n}\n\n/**\n * Creates a new context using the given view with this context\n * as the parent.\n */\nContext.prototype.push = function push (view) {\n  return new Context(view, this);\n};\n\n/**\n * Returns the value of the given name in this context, traversing\n * up the context hierarchy if the value is absent in this context's view.\n */\nContext.prototype.lookup = function lookup (name) {\n  var cache = this.cache;\n\n  var value;\n  if (cache.hasOwnProperty(name)) {\n    value = cache[name];\n  } else {\n    var context = this, intermediateValue, names, index, lookupHit = false;\n\n    while (context) {\n      if (name.indexOf('.') > 0) {\n        intermediateValue = context.view;\n        names = name.split('.');\n        index = 0;\n\n        /**\n         * Using the dot notion path in `name`, we descend through the\n         * nested objects.\n         *\n         * To be certain that the lookup has been successful, we have to\n         * check if the last object in the path actually has the property\n         * we are looking for. We store the result in `lookupHit`.\n         *\n         * This is specially necessary for when the value has been set to\n         * `undefined` and we want to avoid looking up parent contexts.\n         *\n         * In the case where dot notation is used, we consider the lookup\n         * to be successful even if the last \"object\" in the path is\n         * not actually an object but a primitive (e.g., a string, or an\n         * integer), because it is sometimes useful to access a property\n         * of an autoboxed primitive, such as the length of a string.\n         **/\n        while (intermediateValue != null && index < names.length) {\n          if (index === names.length - 1)\n            lookupHit = (\n              hasProperty(intermediateValue, names[index])\n              || primitiveHasOwnProperty(intermediateValue, names[index])\n            );\n\n          intermediateValue = intermediateValue[names[index++]];\n        }\n      } else {\n        intermediateValue = context.view[name];\n\n        /**\n         * Only checking against `hasProperty`, which always returns `false` if\n         * `context.view` is not an object. Deliberately omitting the check\n         * against `primitiveHasOwnProperty` if dot notation is not used.\n         *\n         * Consider this example:\n         * ```\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n         * ```\n         *\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\n         * in the dot notation case, then render call would return:\n         *\n         * \"The length of a football field is 9.\"\n         *\n         * rather than the expected:\n         *\n         * \"The length of a football field is 100 yards.\"\n         **/\n        lookupHit = hasProperty(context.view, name);\n      }\n\n      if (lookupHit) {\n        value = intermediateValue;\n        break;\n      }\n\n      context = context.parent;\n    }\n\n    cache[name] = value;\n  }\n\n  if (isFunction(value))\n    value = value.call(this.view);\n\n  return value;\n};\n\n/**\n * A Writer knows how to take a stream of tokens and render them to a\n * string, given a context. It also maintains a cache of templates to\n * avoid the need to parse the same template twice.\n */\nfunction Writer () {\n  this.templateCache = {\n    _cache: {},\n    set: function set (key, value) {\n      this._cache[key] = value;\n    },\n    get: function get (key) {\n      return this._cache[key];\n    },\n    clear: function clear () {\n      this._cache = {};\n    }\n  };\n}\n\n/**\n * Clears all cached templates in this writer.\n */\nWriter.prototype.clearCache = function clearCache () {\n  if (typeof this.templateCache !== 'undefined') {\n    this.templateCache.clear();\n  }\n};\n\n/**\n * Parses and caches the given `template` according to the given `tags` or\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n * that is generated from the parse.\n */\nWriter.prototype.parse = function parse (template, tags) {\n  var cache = this.templateCache;\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n  var isCacheEnabled = typeof cache !== 'undefined';\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n  if (tokens == undefined) {\n    tokens = parseTemplate(template, tags);\n    isCacheEnabled && cache.set(cacheKey, tokens);\n  }\n  return tokens;\n};\n\n/**\n * High-level method that is used to render the given `template` with\n * the given `view`.\n *\n * The optional `partials` argument may be an object that contains the\n * names and templates of partials that are used in the template. It may\n * also be a function that is used to load partial templates on the fly\n * that takes a single argument: the name of the partial.\n *\n * If the optional `config` argument is given here, then it should be an\n * object with a `tags` attribute or an `escape` attribute or both.\n * If an array is passed, then it will be interpreted the same way as\n * a `tags` attribute on a `config` object.\n *\n * The `tags` attribute of a `config` object must be an array with two\n * string values: the opening and closing tags used in the template (e.g.\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n *\n * The `escape` attribute of a `config` object must be a function which\n * accepts a string as input and outputs a safely escaped string.\n * If an `escape` function is not provided, then an HTML-safe string\n * escaping function is used as the default.\n */\nWriter.prototype.render = function render (template, view, partials, config) {\n  var tags = this.getConfigTags(config);\n  var tokens = this.parse(template, tags);\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\n  return this.renderTokens(tokens, context, partials, template, config);\n};\n\n/**\n * Low-level method that renders the given array of `tokens` using\n * the given `context` and `partials`.\n *\n * Note: The `originalTemplate` is only ever used to extract the portion\n * of the original template that was contained in a higher-order section.\n * If the template doesn't use higher-order sections, this argument may\n * be omitted.\n */\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n  var buffer = '';\n\n  var token, symbol, value;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    value = undefined;\n    token = tokens[i];\n    symbol = token[0];\n\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n    else if (symbol === '&') value = this.unescapedValue(token, context);\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\n    else if (symbol === 'text') value = this.rawValue(token);\n\n    if (value !== undefined)\n      buffer += value;\n  }\n\n  return buffer;\n};\n\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n  var self = this;\n  var buffer = '';\n  var value = context.lookup(token[1]);\n\n  // This function is used to render an arbitrary template\n  // in the current context by higher-order sections.\n  function subRender (template) {\n    return self.render(template, context, partials, config);\n  }\n\n  if (!value) return;\n\n  if (isArray(value)) {\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n    }\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n  } else if (isFunction(value)) {\n    if (typeof originalTemplate !== 'string')\n      throw new Error('Cannot use higher-order sections without the original template');\n\n    // Extract the portion of the original template that the section contains.\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n    if (value != null)\n      buffer += value;\n  } else {\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n  }\n  return buffer;\n};\n\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n  var value = context.lookup(token[1]);\n\n  // Use JavaScript's definition of falsy. Include empty arrays.\n  // See https://github.com/janl/mustache.js/issues/186\n  if (!value || (isArray(value) && value.length === 0))\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\n};\n\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n  var partialByNl = partial.split('\\n');\n  for (var i = 0; i < partialByNl.length; i++) {\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n      partialByNl[i] = filteredIndentation + partialByNl[i];\n    }\n  }\n  return partialByNl.join('\\n');\n};\n\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n  if (!partials) return;\n  var tags = this.getConfigTags(config);\n\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n  if (value != null) {\n    var lineHasNonSpace = token[6];\n    var tagIndex = token[5];\n    var indentation = token[4];\n    var indentedValue = value;\n    if (tagIndex == 0 && indentation) {\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n    }\n    var tokens = this.parse(indentedValue, tags);\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\n  }\n};\n\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return value;\n};\n\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\n  var escape = this.getConfigEscape(config) || mustache.escape;\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n};\n\nWriter.prototype.rawValue = function rawValue (token) {\n  return token[1];\n};\n\nWriter.prototype.getConfigTags = function getConfigTags (config) {\n  if (isArray(config)) {\n    return config;\n  }\n  else if (config && typeof config === 'object') {\n    return config.tags;\n  }\n  else {\n    return undefined;\n  }\n};\n\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\n  if (config && typeof config === 'object' && !isArray(config)) {\n    return config.escape;\n  }\n  else {\n    return undefined;\n  }\n};\n\nvar mustache = {\n  name: 'mustache.js',\n  version: '4.2.0',\n  tags: [ '{{', '}}' ],\n  clearCache: undefined,\n  escape: undefined,\n  parse: undefined,\n  render: undefined,\n  Scanner: undefined,\n  Context: undefined,\n  Writer: undefined,\n  /**\n   * Allows a user to override the default caching strategy, by providing an\n   * object with set, get and clear methods. This can also be used to disable\n   * the cache by setting it to the literal `undefined`.\n   */\n  set templateCache (cache) {\n    defaultWriter.templateCache = cache;\n  },\n  /**\n   * Gets the default or overridden caching object from the default writer.\n   */\n  get templateCache () {\n    return defaultWriter.templateCache;\n  }\n};\n\n// All high-level mustache.* functions use this writer.\nvar defaultWriter = new Writer();\n\n/**\n * Clears all cached templates in the default writer.\n */\nmustache.clearCache = function clearCache () {\n  return defaultWriter.clearCache();\n};\n\n/**\n * Parses and caches the given template in the default writer and returns the\n * array of tokens it contains. Doing this ahead of time avoids the need to\n * parse templates on the fly as they are rendered.\n */\nmustache.parse = function parse (template, tags) {\n  return defaultWriter.parse(template, tags);\n};\n\n/**\n * Renders the `template` with the given `view`, `partials`, and `config`\n * using the default writer.\n */\nmustache.render = function render (template, view, partials, config) {\n  if (typeof template !== 'string') {\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\n                        'argument for mustache#render(template, view, partials)');\n  }\n\n  return defaultWriter.render(template, view, partials, config);\n};\n\n// Export the escaping function so that the user may override it.\n// See https://github.com/janl/mustache.js/issues/244\nmustache.escape = escapeHtml;\n\n// Export these mainly for testing, but also for advanced usage.\nmustache.Scanner = Scanner;\nmustache.Context = Context;\nmustache.Writer = Writer;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mustache);\n\n\n//# sourceURL=webpack://devsecops-assessment/./node_modules/mustache/mustache.mjs?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_cardModel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/cardModel.js */ \"./src/js/cardModel.js\");\n/* harmony import */ var _js_cardRenderer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/cardRenderer.js */ \"./src/js/cardRenderer.js\");\n\n\n\ndocument.getElementById(\"cards-go-here\").innerHTML = (0,_js_cardRenderer_js__WEBPACK_IMPORTED_MODULE_1__.renderUserView)(_js_cardModel_js__WEBPACK_IMPORTED_MODULE_0__.default);\n\n// add flip animation to cards\nconst cards = document.getElementsByClassName(\"card-number\");\nObject.values(cards).forEach((el) => {\n  el.addEventListener(\"click\", () => {\n    el.parentElement.parentElement.classList.toggle(\"flipCard\");\n  });\n});\n\n/**\n * easter-egg tribute to the early web\n * We don't know what we're doing with the css and design so\n * we're sticking in silly things to distract from that fact\n */\nsetTimeout(() => {\n  const titleEl = document.getElementById(\"page-title\");\n  const marquee = document.createElement(\"marquee\");\n  titleEl.parentNode.insertBefore(marquee, titleEl);\n  marquee.appendChild(titleEl);\n}, 7000);\n\n\n\n/**\n * This is for the accordion\n */\n  let acc = document.getElementsByClassName(\"accordion\");\n  let i;\n\n  for (i = 0; i < acc.length; i++) {\n  acc[i].addEventListener(\"click\", function() {\n    this.classList.toggle(\"active\");\n    let panel = this.nextElementSibling;\n    if (panel.style.display === \"block\") {\n      panel.style.display = \"none\";\n    } else {\n      panel.style.display = \"block\";\n    }\n  });\n}\n\n\n//# sourceURL=webpack://devsecops-assessment/./src/index.js?");

/***/ }),

/***/ "./src/js/cardData.json":
/*!******************************!*\
  !*** ./src/js/cardData.json ***!
  \******************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"id\":1,\"slug\":\"dev-practices\",\"category\":\"Dev Practices\",\"title\":\"Documentation\",\"description\":\"How good are your docs? How trusted are they? How easy are they to find?\",\"high_score\":\"Our docs are updated regularly, accurate and easy to find\",\"low_score\":\"Documentation is poor, out of date or non-existant\",\"more_info_link\":\"https://www.atlassian.com/work-management/knowledge-sharing/documentation/importance-of-documentation\",\"what_this_tells_us\":\"- Self-sufficiency / reducing dependence on teams\\\\n- Encourages knowledge sharing\\\\n- Faster onboarding\\\\n- Single source of truth for technical decisions, standards\",\"how_to_help\":\"- Planned documentation time as a team activity to update docs\\\\n- Exemplar docs\\\\n- Document-as-you-go\",\"important\":true,\"seq\":true},{\"id\":2,\"slug\":\"dev-practices\",\"category\":\"Dev Practices\",\"title\":\"IaC\",\"description\":\"Do you follow Infrastructure as Code practices\",\"high_score\":\"We use versioned and tested IaC for all our deployments.  It is kept alongside the code or in a dedicated and well documented repo\",\"low_score\":\"Our deployments are manual\",\"more_info_link\":\"https://www.amazon.co.uk/Infrastructure-Code-Dynamic-Systems-Cloud\",\"what_this_tells_us\":\"- documentation of environments\\\\n- repeatable processes\\\\n- easier spin up of new environments\\\\n- testability\",\"how_to_help\":\"- Exemplar projects\\\\n- Templates\\\\n- Training\\\\n- IaC enabling teams\",\"important\":null,\"seq\":true},{\"id\":3,\"slug\":\"dev-practices\",\"category\":\"Dev Practices\",\"title\":\"QA\",\"description\":\"How easy is it to provide confidence that the changes that are made are correct (technically and functionally)\",\"high_score\":\"We have multiple assurance steps of differing types run in multiple environments as part of our CI & CD processes\",\"low_score\":\"We only have basic unit or \\\\\"integration tests\\\\\" in place\",\"more_info_link\":null,\"what_this_tells_us\":\"- Shift left, shorter feedback loops\\\\n- insight into deployment frequency\\\\n- code is structured well enough to test\\\\n- Documents code (discovery)\\\\n- high confidence and correctness and proof\",\"how_to_help\":\"- QA Strategy\\\\n- CI/CD Enabling team\\\\n- Test Automation enabling teams\\\\n- Adding in technical debt tasks\",\"important\":true,\"seq\":true},{\"id\":4,\"slug\":\"dev-practices\",\"category\":\"Dev Practices\",\"title\":\"Linting and Code Quality\",\"description\":\"How good are your code quality and PR standards.\",\"high_score\":\"We have documented, automated and enforced code quality and linting standards.\\\\nWe have a PR template that should be followed otherwise your PRs are rejected.\\\\nWe have a structured git-branch standard that relates back to the ticket.\\\\nOur have good discipline around our commit messages.\",\"low_score\":\"We don\\'t have linting standards\\\\nOur PR descriptions are poor or non-existent\",\"more_info_link\":null,\"what_this_tells_us\":\"- Team cares about quality\\\\n- Team\\'s code is consistent\\\\n- Onboarding is quick\\\\n- Cognitive load is reduced on PR comitters and approvers\\\\n- There is an easily followed audit trail for changes\",\"how_to_help\":\"- Git training\\\\n- Exemplar repos\\\\n- CI/CD Enabling team\\\\n- Template repos\",\"important\":true,\"seq\":null},{\"id\":5,\"slug\":\"dev-practices\",\"category\":\"Dev Practices\",\"title\":\"Security\",\"description\":\"Security by design and automated security testing\",\"high_score\":\"We run regular threat modelling sessions\\\\nWe include Evil User stories.\\\\nWe have several automated steps as part of our CI/CD (SAST, supply chain, DAST)\",\"low_score\":\"We have no idea what you\\'re talking about\",\"more_info_link\":\"[\\\\\"https://thoughtworksinc.github.io/sensible-security-conversations/\\\\\"]\",\"what_this_tells_us\":\"- The right investment is made upfront\\\\n- Vulns don\\'t make it to production\\\\n- Shift left, pick up risks early\\\\n- Vulns don\\'t make it to production\\\\n- Swiss cheese testing model\\\\n- High confidence in software\\\\n- Compliance\",\"how_to_help\":\"- Security Strategy\\\\n- Security Enabling team\\\\n- Agile threat modelling workshops\\\\n- Tabletop threat modelling workshops\\\\n- SecureCodeWarrior training\\\\n\",\"important\":null,\"seq\":true},{\"id\":6,\"slug\":\"dev-practices\",\"category\":\"Dev Practices\",\"title\":\"Deployment\\\\nstrategy\",\"description\":\"Do you have the ability to do A/B testing in production\",\"high_score\":\"We use fine-grained blue-green deployment\\\\ntechniques or other deployment strategy\\\\nat the level of individual services\\\\nAutomated rollbacks\\\\nIncident response playbook\",\"low_score\":\"We do not use any deployment techniques\\\\nFoggy understanding of environments\\\\nManual config\",\"more_info_link\":\"[\\\\\"https://martinfowler.com/bliki/BlueGreenDeployment.html\\\\\"]\",\"what_this_tells_us\":\"- CI/CD maturity\\\\n- Observability maturity\\\\n- Product thinking - decisions are data driven and team looks for feedback loops\\\\n- MTTR and Deployment Frequency\",\"how_to_help\":\"- Deployment strategy. e.g. Blue green, canary deployment etc\\\\n- Observability strategy\\\\n- Observability enablement\\\\n\",\"important\":true,\"seq\":true},{\"id\":7,\"slug\":\"dev-practices\",\"category\":\"Dev Practices\",\"title\":\"Sensible Defaults\",\"description\":\"Do you follow sensible defaults/golden path/tech radar\",\"high_score\":\"We have/know about sensible defaults and we follow them as best we can\\\\nWe use technology off Tesco\\'s golden-path/menu\",\"low_score\":\"We don\\'t know about sensible defaults\\\\nWe often ignore the golden-path\",\"more_info_link\":null,\"what_this_tells_us\":\"- \\\\\"Not Invented Here\\\\\" syndrome\\\\n- overall practices maturity\\\\n- Poor awareness of best practice\\\\n- Sensible defaults need reviewing\\\\n- Golden-path needs reviewing\\\\n\",\"how_to_help\":\"- Publish sensible defaults for infra\\\\n- Publish sensible defaults for back-end\\\\n- Publish sensible defaults for front-end\\\\n- Publish sensible defaults for security\\\\n- Promote golden-path for infra\\\\n- Promote golden-path for back-end\",\"important\":null,\"seq\":true},{\"id\":8,\"slug\":\"culture\",\"category\":\"Culture\",\"title\":\"Uh oh\",\"description\":\"What happens in case of failure/incident?\",\"high_score\":\"We work through the situation together.\\\\nWe discuss the issue in depth\\\\nWe work out the best way to prevent/mitigate in future\",\"low_score\":\"We discuss the issue but nothing changes\\\\nThe person/team could get in trouble or is blamed\\\\nNo investment is made in paying down tech debt\",\"more_info_link\":\"[ \\\\\"https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture\\\\\", \\\\\"https://blog.pragmaticengineer.com/postmortem-best-practices/\\\\\" ]\",\"what_this_tells_us\":\"- Is there a Pathological/Bureaucratic/Generative culture\\\\n- Tech debt stories not being prioritized\\\\n- Absence of runbooks\\\\n- Siloed teams\",\"how_to_help\":\"- Incident handling best practices\\\\n- Blameless postmortem facilitation\\\\n- Obserability strategy\\\\n- JIRA audit\\\\n- Agile coaching\\\\n- Clear ownership and accountability of resolution\\\\n- Runbooks for common issues\",\"important\":true,\"seq\":true},{\"id\":9,\"slug\":\"culture\",\"category\":\"Culture\",\"title\":\"Onboarding\",\"description\":\"How easy is it to onboard members to your team and make them productive\",\"high_score\":\"New team members can spin up a environment quickly and commit to production < 3 weeks\",\"low_score\":\"It can take a few months before a team member can actively contribute\\\\n\\\\nIt takes a long time to discover all the codebases and environments\",\"more_info_link\":\"[\\\\\"https://github.com/TeamTopologies/Team-API-template\\\\\"]\",\"what_this_tells_us\":null,\"how_to_help\":\"- Team api templates\\\\n- ADRs and RFCs\\\\n- Document readmes\\\\n- Runbook enablement\\\\n- Documentation enabling team\\\\n- Documentation hackathon\",\"important\":true,\"seq\":true},{\"id\":10,\"slug\":\"culture\",\"category\":\"Culture\",\"title\":\"Purpose\",\"description\":\"Do you know why your team is doing what it\\'s doing and how it contributes to the big picture? \",\"high_score\":\"Very clear what we\\'re doing\\\\nWe\\'re close to the customer\\\\nWe see our impact quickly\\\\nWe respond quickly to customer feedback\\\\nWe can see the impact of our changes on our customers\\\\nThere is a clear strategy and vision for our product\",\"low_score\":\"We don\\'t know how / where our code is being used\\\\nNo idea who our customer is or what they want. We only take educated guesses\\\\nWe only rarely (if ever) see the impact of our changes\\\\nWe are told what to do. Not sure why\",\"more_info_link\":null,\"what_this_tells_us\":\"- Individual purpose\\\\n- Team satisfaction\\\\n- Clear vision and shared understanding of what is being done\",\"how_to_help\":\"- Product & Team vision\\\\n- Tech vision\\\\n- Product Strategies\\\\n- Tech strategies\\\\n- Product analytics\",\"important\":true,\"seq\":true},{\"id\":11,\"slug\":\"culture\",\"category\":\"Culture\",\"title\":\"Growth\",\"description\":\"Have you grown in your profession since you joined Tesco?\\\\nHow easy is it to find clear and visible ways to help you progress in your discipline\",\"high_score\":\"I have given enough opportunity to explore different things\\\\nI felt I have grown a lot since I joined tesco.\\\\nThere are enough support forums to help me progress.\\\\nI have been mentored many times by others.\\\\nThere is a culture of giving feedback.\",\"low_score\":\"I don\\'t get to do interesting tasks\\\\nI don\\'t see clear paths of progression\\\\nI feel I am stuck\",\"more_info_link\":null,\"what_this_tells_us\":\"- How good are our feedback loops.\\\\n- Are the challenges structured in a right way to grow our devs\\\\n- Are there enough opportunities for our devs\\\\n- Are there the right support structures in place \",\"how_to_help\":\"- Create secondment opportunities and engineer rotation\\\\n- Create mentoring framework\\\\n- Establish and fund Communities of Practice\\\\n- Establish and fund more hackathons\",\"important\":null,\"seq\":true},{\"id\":12,\"slug\":\"flow\",\"category\":\"Flow\",\"title\":\"Git Branching\",\"description\":\"What is your Git branching strategy?\",\"high_score\":\"We develop directly on main (trunk based) or any\\\\nfeature branches last no more than 2 days\",\"low_score\":\"Our feature branches can last for many sprints\",\"more_info_link\":null,\"what_this_tells_us\":\"- how to break down work properly\\\\n- the value of regular and small commits\\\\n- how blocked/unblocked they are on most tasks\\\\n- TDD practices (good TDD enables trunk based development) - QA strategy\\\\n- directly related to release frequency\",\"how_to_help\":\"- QA Strategy\\\\n- Git training\\\\n- Exemplar repos\\\\n- Dave Farley\\'s videos\\\\n \",\"important\":true,\"seq\":true},{\"id\":13,\"slug\":\"flow\",\"category\":\"Flow\",\"title\":\"Focus time\",\"description\":\"How much time in a typical day do you get to be \\\\\"in the zone\\\\\"?\",\"high_score\":\"About half a day\\\\nI am encouraged to and get to set aside focus time everyday\",\"low_score\":\"I am in and out of meetings the entire day\\\\nI am made to attend meetings that I don\\'t need to be in\\\\nI am bombarded with ad-hoc requests from other teams\",\"more_info_link\":null,\"what_this_tells_us\":\"- Focus time is short\\\\n- Too much context switching\\\\n- \\\\\"Work not Visible\\\\\"\\\\n- Too many meetings\",\"how_to_help\":\"- Incident handling best practices\\\\n- Blameless postmortem facilitation\\\\n- Obserability strategy\\\\n- JIRA audit\\\\n- Meeting audit\\\\n- Agile coaching\",\"important\":true,\"seq\":true},{\"id\":14,\"slug\":\"observability\",\"category\":\"Observability\",\"title\":\"Observability\",\"description\":\"Observability is the process of watching what your systems do at every layer so that you can build a comprehensive picture of how it does what it does\",\"high_score\":\"We can see through the entire stack from the metal all the way up to UI issues and performance\",\"low_score\":\"We can only see one or two layers and don\\'t really tie them together to tell a story\",\"more_info_link\":\"https://thenewstack.io/how-much-observability-is-enough/\",\"what_this_tells_us\":\"- Why, how, and where is a system broken?\\\\n- Opportunities for data-driven optimisation\\\\n- Measure improvements / detriments over time\",\"how_to_help\":\"- Observability strategy\\\\n- Exemplar projects\\\\n- Observability enablement\",\"important\":true,\"seq\":true}]');\n\n//# sourceURL=webpack://devsecops-assessment/./src/js/cardData.json?");

/***/ }),

/***/ "./src/js/cardModel.js":
/*!*****************************!*\
  !*** ./src/js/cardModel.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _cardData_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cardData.json */ \"./src/js/cardData.json\");\n/* harmony import */ var _moreCardInfo_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./moreCardInfo.json */ \"./src/js/moreCardInfo.json\");\n// transform the raw card json\n// we want an array of elements that look like\n// [{\n//   categoryName: <name>\n//   cards:[<card_data>,card_data>]\n// },\n// {\n//   categoryName: <name>\n//   cards:[<card_data>,card_data>]\n// }]\n\n\n\n// get all categories first then add data to them\n// we want the data objects by returned by category\n// get unique categories to begin with\nlet categories = {};\n_cardData_json__WEBPACK_IMPORTED_MODULE_0__.forEach((el) => {\n  categories[el.category] = {};\n});\n_cardData_json__WEBPACK_IMPORTED_MODULE_0__.forEach((el) => {\n  if (el.category) {\n    categories[el.category].categoryName = el.category;\n    categories[el.category].cards = [];\n  }\n});\n_cardData_json__WEBPACK_IMPORTED_MODULE_0__.forEach((card) => {\n  let moreInfoData = _moreCardInfo_json__WEBPACK_IMPORTED_MODULE_1__.filter(el => {\n    return el.cardId === card.id;\n  });\n  card.moreCardInfo = moreInfoData;\n  if (card.category) {\n    categories[card.category].categoryName = card.category;\n    categories[card.category].cards.push(card);\n  }\n});\n\nconst cardOnlyData = Object.values(categories);\n//console.log(cardOnlyData);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cardOnlyData);\n\n\n//# sourceURL=webpack://devsecops-assessment/./src/js/cardModel.js?");

/***/ }),

/***/ "./src/js/cardRenderer.js":
/*!********************************!*\
  !*** ./src/js/cardRenderer.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"renderUserView\": () => (/* binding */ renderUserView)\n/* harmony export */ });\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.mjs\");\n\n\n/**\n * Render the client side template\n * @param {cardData} cardData object\n * @returns string <the rendered HTML template>\n */\nfunction renderUserView(cardData) {\n  return mustache__WEBPACK_IMPORTED_MODULE_0__.default.render(\n    `\n  {{#data}}\n    <div class=\"category-name\" data-category=\"{{slug}}\">\n      <h2 class=\"display-4\">{{{categoryName}}}</h2>\n    </div>\n    {{#cards}}\n    <div class=\"main-card-container col-md-6 col-lg-3 mb-2\">\n      <div class=\"question-card\">\n\n        <div class=\"card-front {{slug}}\">\n          <div class=\"card-number\">{{id}}</div>\n          {{#important}}\n          <span class=\"card-important\"><i class=\"fas fa-star\"></i></span>\n          {{/important}}\n          <h2>{{title}}</h2>\n          <p>{{description}}</p>\n          <footer class=\"card-footer\">{{categoryName}}</footer>\n        </div>\n        <div class=\"card-back scroll\">\n          <div class=\"card-number\">{{id}}</div>\n          {{#important}}\n          <span class=\"card-important\"><i class=\"fas fa-star\"></i></span>\n          {{/important}}\n          <h2>{{title}}</h2>\n          <div class=\"card-score\">\n            <p class=\"card-points high-score\">5 points</p>\n            <p>{{high_score}}</p>\n          </div>\n          <div class=\"card-score\">\n            <p class=\"card-points low-score\">1 point</p>\n            <p>{{low_score}}</p>\n          </div>\n<!--          {{#moreCardInfo}}-->\n<!--          <div>-->\n<!--            <div class=\"accordion\" id=\"accordionExample\">-->\n<!--            <div class=\"accordion-item\">-->\n<!--              <h2 class=\"accordion-header\" id=\"headingOne\">-->\n<!--                <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">-->\n<!--                {{title}}-->\n<!--                </button>-->\n<!--              </h2>-->\n<!--              <div id=\"collapseOne\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">-->\n<!--                <div class=\"accordion-body\">-->\n<!--                  {{description}}-->\n<!--                  {{#url}}<a href=\"{{url}}\">{{url}}</a>{{/url}}-->\n<!--                </div>-->\n<!--              </div>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--        </div>-->\n<!--          {{/moreCardInfo}}-->\n          {{#moreCardInfo}}\n  <button class=\"accordion\">{{title}}</button>\n  <div class=\"panel\"><p>{{description}}</p>\n  <p>{{#url}}<a href=\"{{url}}\">{{url}}</a>{{/url}}</p>\n  </div>\n          {{/moreCardInfo}}\n\n        </div>\n      </div>\n    </div>\n    {{/cards}}\n  {{/data}}\n  `,\n    { data: cardData }\n  );\n}\n\n\n\n\n//# sourceURL=webpack://devsecops-assessment/./src/js/cardRenderer.js?");

/***/ }),

/***/ "./src/js/moreCardInfo.json":
/*!**********************************!*\
  !*** ./src/js/moreCardInfo.json ***!
  \**********************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"cardId\":1,\"title\":\"The importance of documentation \",\"description\":\"Why docs are important\",\"url\":\"https://www.atlassian.com/work-management/knowledge-sharing/documentation/importance-of-documentation\"},{\"cardId\":2,\"title\":\"Infrastructure as Code\",\"description\":\"IaC\",\"url\":\"https://martinfowler.com/bliki/InfrastructureAsCode.html\"},{\"cardId\":5,\"title\":\"Agile Threat Modelling\",\"description\":\"Agile Threat Modelling Resource\",\"url\":\"https://thoughtworksinc.github.io/sensible-security-conversations/\"},{\"cardId\":6,\"title\":\"Blue-Green Deployment\",\"description\":\"Deploymet strategy with blue-green deployment\",\"url\":\"https://martinfowler.com/bliki/BlueGreenDeployment.html\"},{\"cardId\":8,\"title\":\"DevOps Culture\",\"description\":\"Westrum Organisational Culture\",\"url\":\"https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture\"},{\"cardId\":8,\"title\":\"DevOps Best Practices\",\"description\":\"Incident Review and Postmortem Best Practices\",\"url\":\"https://blog.pragmaticengineer.com/postmortem-best-practices\"},{\"cardId\":9,\"title\":\"Team Topologies\",\"description\":\"Team Topology\",\"url\":\"https://github.com/TeamTopologies/Team-API-template\"},{\"cardId\":14,\"title\":\"How Much Observability is Enough?\",\"description\":\"How Much Observerability is Enough?\",\"url\":\"https://thenewstack.io/how-much-observability-is-enough/\"},{\"cardId\":14,\"title\":\"What Does Good Look Like?\",\"description\":\"What Does Good Look Like?\",\"url\":\"http://devsikhops.com/observability-coverage/\"}]');\n\n//# sourceURL=webpack://devsecops-assessment/./src/js/moreCardInfo.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;